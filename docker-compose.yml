version: '3.8'

services:
  api:
    build:
      context: ./ecommerce
      dockerfile: ./Dockerfile
      args:
        STATIC_URL: "/static/"
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8000:8000
    volumes:
      - ./ecommerce/ecommerce:/app/ecommerce:Z,cached
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  worker:
    build: ./ecommerce
    command: celery -A ecommerce worker -l info
    ports:
      - 8001:8000
    env_file:
      - .env
    depends_on:
      - redis
      - db
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:14-alpine
    command:
      [
        "-c",
        "shared_buffers=256MB",
        "-c",
        "max_connections=1000",
        "-c",
        "idle_in_transaction_session_timeout=300000",
        "-c",
        "statement_timeout=300000",
        "-c",
        "log_statement=all",
        "-c",
        "log_min_duration_statement=10",
        "-c",
        "shared_preload_libraries=pg_stat_statements",
        "-c",
        "tcp_keepalives_idle=300",
        "-c",
        "tcp_keepalives_interval=30",
        "-c",
        "tcp_keepalives_count=2"
      ]
    ports:
      - 5432:5432
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
  redis_data:

networks:
  backend:
    driver: bridge
